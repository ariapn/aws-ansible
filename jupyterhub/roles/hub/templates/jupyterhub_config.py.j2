# {{ ansible_managed }}
# Configuration file for jupyterhub.

c = get_config()
c.JupyterHub.ip = u'{{ ansible_default_ipv4.address }}'
c.JupyterHub.port = 8000
c.JupyterHub.cookie_secret_file = u'{{ jupyterhub_srv_dir }}/cookie_secret'
c.JupyterHub.db_url = u'{{ jupyterhub_srv_dir }}/jupyterhub.sqlite'
c.JupyterHub.confirm_no_ssl = True
{% if not cleanup_on_shutdown %}
c.JupyterHub.cleanup_proxy = False
c.JupyterHub.cleanup_servers = False
{% endif %}

# Always start using the labhub script to make JupyterLab work,
# but don't redirect users to it unless jupyterlab_default is set.
#c.Spawner.cmd = u'/usr/local/bin/start-jupyter-labhub.sh'
#{% if jupyterlab_default %}
#c.Spawner.default_url = '/lab'
#{% endif %}

# A list of jupyterhub groups to create.
c.JupyterHub.load_groups = {
{%- for group in jupyterhub_groups -%}
    '{{group.name}}': [
{%- for member in group.members -%}
        '{{member}}',
{%- endfor -%}
    ],
{% endfor -%}
}

c.JupyterHub.authenticator_class = u'jhub_remote_user_authenticator.remote_user_auth.RemoteUserAuthenticator'
c.LocalAuthenticator.create_system_users = True
c.Authenticator.add_user_cmd =  ['adduser', '-q', '--home', '{{home_dir}}/USERNAME', '--gecos', '""', '--disabled-password']

{% if jupyterhub_admin_users|length %}
c.Authenticator.admin_users = {
{%- for user in jupyterhub_admin_users[:-1] -%}
'{{user}}',
{%- endfor -%}
'{{-jupyterhub_admin_users[-1]-}}'}
{% else %}
c.Authenticator.admin_users = set()
{% endif %}

{% if jupyterhub_users|length %}
c.Authenticator.whitelist = {
{%- for user in jupyterhub_users[:-1] -%}
'{{user}}',
{%- endfor -%}
'{{-jupyterhub_users[-1]-}}'}
{% else %}
c.Authenticator.whitelist = set()
{% endif %}

